# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Capacity {
  cpu: String
  memory: String
}

type ClusterDeployment {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
}

input ClusterDeploymentInput {
  apiVip: String!
  baseDomain: String!
  clusterImageSetName: String!
  clusterName: String!
  clusterNetworkCidr: String!
  externalNetworkBridge: String!
  ingressVip: String!
  labels: [String!]!
  machineCidr: String!
  networkHostPrefix: String!
  networkType: String!
  providerConnectionName: String!
  providerName: String!
  provisioningNetworkBridge: String!
  provisioningNetworkCidr: String!
  provisioningNetworkInterface: String!
  serviceNetworkCidr: String!
}

type ClusterImageSet {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
}

type ClusterManagementAddOn {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
  spec: ClusterManagementAddOnSpec!
}

type ClusterManagementAddOnConfigutation {
  crdName: String!
  crName: String!
}

type ClusterManagementAddOnMeta {
  decription: String!
  displayName: String!
}

type ClusterManagementAddOnSpec {
  addOnConfiguration: ClusterManagementAddOnConfigutation!
  addOnMeta: ClusterManagementAddOnMeta!
}

type Condition {
  lastTransitionTime: String
  message: String
  reason: String
  status: String!
  type: String!
}

type ManagedCluster {
  apiVersion: String!
  displayStatus: String!
  info: ManagedClusterInfo
  kind: String!
  metadata: Metadata!
  spec: ManagedClusterSpec!
  status: ManagedClusterStatus
}

type ManagedClusterInfo {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
  status: ManagedClusterInfoStatus
}

type ManagedClusterInfoStatus {
  conditions: [Condition!]!
  nodeList: [Node!]
}

type ManagedClusterSpec {
  hubAcceptsClient: String!
  leaseDurationSeconds: Float!
}

type ManagedClusterStatus {
  allocatable: Capacity
  capacity: Capacity
  conditions: [Condition!]!
  version: ManagedClusterVersion!
}

type ManagedClusterVersion {
  kubernetes: String
}

type Metadata {
  creationTimestamp: String!
  labels: [String!]!
  name: String!
  namespace: String
  uid: String!
}

type Mutation {
  createClusterDeployment(input: ClusterDeploymentInput!): Boolean!
  createProviderConnection(input: ProviderConnectionInput!): Boolean
  deleteProviderConnection(name: String!, namespace: String!): Boolean
  deleteSecret(name: String!, namespace: String!): Boolean!
}

type Namespace {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
}

type Node {
  capacity: Capacity!
  conditions: [Condition!]!
  name: String!
}

type ProviderConnection {
  apiVersion: String!
  data: ProviderConnectionData!
  kind: String!
  metadata: Metadata!
}

type ProviderConnectionData {
  awsAccessKeyID: String
  awsSecretAccessKeyID: String
  baseDomain: String!
  baseDomainResourceGroupName: String
  cacertificate: String
  clientId: String
  clientsecret: String
  datacenter: String
  datastore: String
  gcProjectID: String
  gcServiceAccountKey: String
  isOcp: Boolean
  libvirtURI: String
  password: String
  pullSecret: String!
  sshPrivatekey: String!
  sshPublickey: String!
  subscriptionid: String
  tenantid: String
  username: String
  vcenter: String
  vmClusterName: String
}

input ProviderConnectionDataInput {
  awsAccessKeyID: String
  awsSecretAccessKeyID: String
  baseDomain: String!
  baseDomainResourceGroupName: String
  cacertificate: String
  clientId: String
  clientsecret: String
  datacenter: String
  datastore: String
  gcProjectID: String
  gcServiceAccountKey: String
  isOcp: Boolean
  libvirtURI: String
  password: String
  pullSecret: String!
  sshPrivatekey: String!
  sshPublickey: String!
  subscriptionid: String
  tenantid: String
  username: String
  vcenter: String
  vmClusterName: String
}

input ProviderConnectionInput {
  data: ProviderConnectionDataInput!
  name: String!
  namespace: String!
  providerID: String!
}

type Query {
  clusterDeployments(fieldSelector: String, labelSelector: String): [ClusterDeployment!]!
  clusterImageSets(fieldSelector: String, labelSelector: String): [ClusterImageSet!]!
  clusterManagementAddOns(fieldSelector: String, labelSelector: String): [ClusterManagementAddOn!]!
  managedClusters(fieldSelector: String, labelSelector: String): [ManagedCluster!]!
  namespaces(fieldSelector: String, labelSelector: String): [Namespace!]!
  providerConnections: [ProviderConnection!]!
  secrets(fieldSelector: String, labelSelector: String): [Secret!]!
}

type Secret {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
}
